<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Covid19Analysis</name>
    </assembly>
    <members>
        <member name="T:Covid19Analysis.App">
            <summary>
            Provides application-specific behavior to supplement the default Application class.
            </summary>
        </member>
        <member name="M:Covid19Analysis.App.#ctor">
            <summary>
            Initializes the singleton application object.  This is the first line of authored code
            executed, and as such is the logical equivalent of main() or WinMain().
            </summary>
        </member>
        <member name="M:Covid19Analysis.App.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
            Invoked when the application is launched normally by the end user.  Other entry points
            will be used such as when the application is launched to open a specific file.
            </summary>
            <param name="e">Details about the launch request and process.</param>
        </member>
        <member name="M:Covid19Analysis.App.OnNavigationFailed(System.Object,Windows.UI.Xaml.Navigation.NavigationFailedEventArgs)">
            <summary>
            Invoked when Navigation to a certain page fails
            </summary>
            <param name="sender">The Frame which failed navigation</param>
            <param name="e">Details about the navigation failure</param>
        </member>
        <member name="M:Covid19Analysis.App.OnSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>
            Invoked when application execution is being suspended.  Application state is saved
            without knowing whether the application will be terminated or resumed with the contents
            of memory still intact.
            </summary>
            <param name="sender">The source of the suspend request.</param>
            <param name="e">Details about the suspend request.</param>
        </member>
        <member name="M:Covid19Analysis.App.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Covid19Analysis.App.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:Covid19Analysis.App.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:Covid19Analysis.App.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:Covid19Analysis.CovidCSV.CsvConstants">
            <summary>
                Commonly used constants within CSVReader and CSVWriter
            </summary>
        </member>
        <member name="F:Covid19Analysis.CovidCSV.CsvConstants.DateFormat">
            <summary>The date format</summary>
        </member>
        <member name="F:Covid19Analysis.CovidCSV.CsvConstants.HeaderInformation">
            <summary>The header information for when saving a CSV file</summary>
        </member>
        <member name="T:Covid19Analysis.CovidCSV.CSVWriter">
            <summary>
                Class to save Covid-19 data to a CSV file
            </summary>
        </member>
        <member name="M:Covid19Analysis.CovidCSV.CSVWriter.SaveDataAsCSV(Covid19Analysis.Model.CovidLocationDataCollection)">
            <summary>
                Saves the data as CSV.
            </summary>
            <param name="dataToSave">The data to save.</param>
        </member>
        <member name="T:Covid19Analysis.CovidCSV.CsvReader">
            <summary>
                Reads CSV file and extracts information
            </summary>
        </member>
        <member name="P:Covid19Analysis.CovidCSV.CsvReader.CsvFile">
            <summary>Gets or sets the CSV file.</summary>
            <value>The CSV file.</value>
            <exception cref="T:System.ArgumentNullException">csvFile cannot be null</exception>
        </member>
        <member name="P:Covid19Analysis.CovidCSV.CsvReader.Errors">
            <summary>Get all lines or errors if any.</summary>
            <value>The errors.</value>
        </member>
        <member name="M:Covid19Analysis.CovidCSV.CsvReader.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Covid19Analysis.CovidCSV.CsvReader" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">csvFile cannot be null</exception>
        </member>
        <member name="M:Covid19Analysis.CovidCSV.CsvReader.Parse">
            <summary>
                Parses the current CSV that has been loaded in.
            </summary>
            <returns>Collection of CovidCases</returns>
        </member>
        <member name="M:Covid19Analysis.CovidCSV.CsvReader.GetErrorsAsString">
            <summary>Gets the errors as string.</summary>
            <returns>
              A string of all errors.
            </returns>
        </member>
        <member name="T:Covid19Analysis.MainPage">
            <summary>
            An empty page that can be used on its own or navigated to within a Frame.
            </summary>
        </member>
        <member name="F:Covid19Analysis.MainPage.ApplicationHeight">
            <summary>
                The application height
            </summary>
        </member>
        <member name="F:Covid19Analysis.MainPage.ApplicationWidth">
            <summary>
                The application width
            </summary>
        </member>
        <member name="P:Covid19Analysis.MainPage.CurrentFile">
            <summary>
                Gets or sets the current data file to analyze.
            </summary>
            <value>The current data file to analyze.</value>
        </member>
        <member name="M:Covid19Analysis.MainPage.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Covid19Analysis.MainPage" /> class.
            </summary>
        </member>
        <member name="M:Covid19Analysis.MainPage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Covid19Analysis.MainPage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Covid19Analysis.MainPage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Covid19Analysis.Model.CovidCase">
            <summary>
                Contains information of a reported covid case.
            </summary>
        </member>
        <member name="P:Covid19Analysis.Model.CovidCase.Location">
            <summary>
                Gets or sets the name of the LocationData.
            </summary>
            <value>The name of the LocationData.</value>
        </member>
        <member name="P:Covid19Analysis.Model.CovidCase.Date">
            <summary>
                Gets or sets the date of the covid case.
            </summary>
            <value>The date of the covid case.</value>
        </member>
        <member name="P:Covid19Analysis.Model.CovidCase.PositiveIncrease">
            <summary>
                Gets or sets the positive increase.
            </summary>
            <value>The positive increase you want to set.</value>
        </member>
        <member name="P:Covid19Analysis.Model.CovidCase.TotalTestCount">
            <summary>
                Gets the total test count of all positive and negative tests.
            </summary>
            <value>The total test count of all positive and negative tests.</value>
        </member>
        <member name="P:Covid19Analysis.Model.CovidCase.NegativeIncrease">
            <summary>
                Gets or sets the negative increase.
            </summary>
            <value>The negative increase to be set.</value>
        </member>
        <member name="P:Covid19Analysis.Model.CovidCase.DeathIncrease">
            <summary>
                Gets or sets the death increase.
            </summary>
            <value>The death increase to be set.</value>
        </member>
        <member name="P:Covid19Analysis.Model.CovidCase.HospitalizedIncrease">
            <summary>
                Gets or sets the hospitalized increase.
            </summary>
            <value>The hospitalized increase to be set.</value>
        </member>
        <member name="M:Covid19Analysis.Model.CovidCase.#ctor(System.String,System.DateTime)">
            <summary>
                Initializes a new instance of the <see cref="T:Covid19Analysis.Model.CovidCase" /> class.
            </summary>
            <param name="state">The name of the LocationData.</param>
            <param name="date">The date of the covid case.</param>
            <exception cref="T:System.ArgumentNullException">state cannot be null</exception>
        </member>
        <member name="M:Covid19Analysis.Model.CovidCase.ToString">
            <summary>
                Get a string representation of the Covid Case.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Covid19Analysis.Model.UnitedStatesLocations">
            <summary>
                Enums of all United States and Commonwealth / Territories Abbreviations
            </summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.AL">
            <summary>Location abbreviation for Alabama</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.AK">
            <summary>Location abbreviation for Alaska</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.AZ">
            <summary>Location abbreviation for Arizona</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.AR">
            <summary>Location abbreviation for Arkansas</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.CA">
            <summary>Location abbreviation for California</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.CO">
            <summary>Location abbreviation for Colorado</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.CT">
            <summary>Location abbreviation for Connecticut</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.DE">
            <summary>Location abbreviation for Delaware</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.FL">
            <summary>Location abbreviation for Florida</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.GA">
            <summary>Location abbreviation for Georgia</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.HI">
            <summary>Location abbreviation for Hawaii</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.ID">
            <summary>Location abbreviation for Idaho</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.IL">
            <summary>Location abbreviation for Illinois</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.IN">
            <summary>Location abbreviation for Indiana</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.IA">
            <summary>Location abbreviation for Iowa</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.KS">
            <summary>Location abbreviation for Kansas</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.KY">
            <summary>Location abbreviation for Kentucky</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.LA">
            <summary>Location abbreviation for Louisiana</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.ME">
            <summary>Location abbreviation for Maine</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.MD">
            <summary>Location abbreviation for Maryland</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.MA">
            <summary>Location abbreviation for Massachusetts</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.MI">
            <summary>Location abbreviation for Michigan</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.MN">
            <summary>Location abbreviation for Minnesota</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.MS">
            <summary>Location abbreviation for Mississippi</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.MO">
            <summary>Location abbreviation for Missouri</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.MT">
            <summary>Location abbreviation for Montana</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.NE">
            <summary>Location abbreviation for Nebraska</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.NV">
            <summary>Location abbreviation for Nevada</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.NH">
            <summary>Location abbreviation for New Hampshire</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.NJ">
            <summary>Location abbreviation for New Jersey</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.NM">
            <summary>Location abbreviation for New Mexico</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.NY">
            <summary>Location abbreviation for New York</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.NC">
            <summary>Location abbreviation for North Carolina</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.ND">
            <summary>Location abbreviation for North Dakota</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.OH">
            <summary>Location abbreviation for Ohio</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.OK">
            <summary>Location abbreviation for Oklahoma</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.OR">
            <summary>Location abbreviation for Oregon</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.PA">
            <summary>Location abbreviation for Pennsylvania</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.RI">
            <summary>Location abbreviation for Rhode Island</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.SC">
            <summary>Location abbreviation for South Carolina</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.SD">
            <summary>Location abbreviation for South Dakota</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.TN">
            <summary>Location abbreviation for Tennessee</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.TX">
            <summary>Location abbreviation for Texas</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.UT">
            <summary>Location abbreviation for Utah</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.VT">
            <summary>Location abbreviation for Vermont</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.VA">
            <summary>Location abbreviation for Virginia</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.WA">
            <summary>Location abbreviation for Washington</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.WV">
            <summary>Location abbreviation for West Virginia</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.WI">
            <summary>Location abbreviation for Wisconsin</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.WY">
            <summary>Location abbreviation for Wyoming</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.AS">
            <summary>Location abbreviation for American Samoa</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.DC">
            <summary>Location abbreviation for District of Columbia</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.FM">
            <summary>Location abbreviation for Federated States of Micronesia</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.GU">
            <summary>Location abbreviation for Guam</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.MH">
            <summary>Location abbreviation for Marshall Islands</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.MP">
            <summary>Location abbreviation for Northern Mariana Islands</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.PW">
            <summary>Location abbreviation for Palau</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.PR">
            <summary>Location abbreviation for Puerto Rico</summary>
        </member>
        <member name="F:Covid19Analysis.Model.UnitedStatesLocations.VI">
            <summary>Location abbreviation for Virgin Islands</summary>
        </member>
        <member name="T:Covid19Analysis.Model.CovidLocationData">
            <summary>
                Stores the data for a given LocationData / territory.
            </summary>
        </member>
        <member name="P:Covid19Analysis.Model.CovidLocationData.State">
            <summary>
                Gets or sets the LocationData.
            </summary>
            <value>
                The state to be set.
            </value>
        </member>
        <member name="P:Covid19Analysis.Model.CovidLocationData.DuplicateCases">
            <summary>Gets the duplicate cases.</summary>
            <value>The duplicate cases.</value>
        </member>
        <member name="P:Covid19Analysis.Model.CovidLocationData.CovidCases">
            <summary>
                Gets all cases for this state / territory.
            </summary>
            <returns>A collection of covid cases for this state / territory</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Covid19Analysis.Model.CovidLocationData"/> class.
            </summary>
            <param name="state">The state / territory of the data</param>
            <exception cref="T:System.ArgumentNullException">state cannot be null</exception>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.AddCovidCase(Covid19Analysis.Model.CovidCase)">
            <summary>
                Adds a single covid case to the collection
            </summary>
            <param name="covidCase">The covid case to be added</param>
            <exception cref="T:System.ArgumentNullException">covidCase cannot be null</exception>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetEarliestPositiveCase">
            <summary>
                Gets the earliest positive case for this LocationData / territory
            </summary>
            <returns>A single covid case of the earliest positive case</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetHighestNumberOfNegativeIncreases">
            <summary>
                Gets the highest number of negative increases.
            </summary>
            <returns>A CovidCase with the highest number of negative tests</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.SortData">
            <summary>
                Sorts the data by date (earliest first).
            </summary>
            <returns>the original data in order by date (earliest first)</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetNumberOfDaysWherePositiveTestsAreAbove(System.Int32)">
            <summary>
                Gets the number of days where positive tests are above a specified amount.
            </summary>
            <param name="numberOfPositiveTests">The number of positive tests.</param>
            <returns>
              <br />
            </returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetNumberOfDaysWherePositiveTestsAreBelow(System.Int32)">
            <summary
                >Gets the number of days where positive tests are below a specified amount.
            </summary>
            <param name="numberOfPositiveTests">The number of positive tests.</param>
            <returns>
              <br />
            </returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetOverallPositivityRate(System.Collections.Generic.IList{Covid19Analysis.Model.CovidCase})">
            <summary>
                Gets the overall positivity rate.
            </summary>
            <param name="covidCases">Collection of covid cases</param>
            <returns>The overall positivity rate</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetAverageNumberOfPositiveTests(System.Collections.Generic.IList{Covid19Analysis.Model.CovidCase})">
            <summary>
                Gets the average number of positive tests.
            </summary>
            <param name="covidCases">The collection of covid cases.</param>
            <returns></returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetAverageNumberOfAllTests(System.Collections.Generic.IList{Covid19Analysis.Model.CovidCase})">
            <summary>
                Gets the average number of all tests.
            </summary>
            <param name="covidCases">The covid cases.</param>
            <returns>The average number of all tests.</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetHighestNumberOfTestsOnAGivenDay(System.Collections.Generic.IList{Covid19Analysis.Model.CovidCase})">
            <summary>
                Gets the highest number of tests on a given day.
            </summary>
            <param name="covidCases">The covid cases.</param>
            <returns>CovidCase with the highest test on a given day</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetHighestDeathsEvent">
            <summary>
                Gets the highest deaths event.
            </summary>
            <returns>CovidCase with the highest death on a single day.</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetHighestHospitalization">
            <summary>
                Gets the CovidCase with the highest hospitalization.
            </summary>
            <returns>CovidCase with the highest hospitalizations</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetHighestPercentageOfPositiveTests">
            <summary>
                Gets the highest percentage of positive tests event.
            </summary>
            <returns>CovidCase with the highest percentage of positive tests.</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetEventsFromMonth(System.Int32)">
            <summary>
                Gets the events from a given month.
            </summary>
            <param name="month">The month.</param>
            <returns>CovidCases of a given month.</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetLowestNumberOfTotalTests(System.Collections.Generic.IList{Covid19Analysis.Model.CovidCase})">
            <summary>
                Gets the lowest number of total tests.
            </summary>
            <param name="covidCases">The covid cases.</param>
            <returns>CovidCase with the lowest number of total tests</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetHighestNumberOfPositiveTests(System.Collections.Generic.IList{Covid19Analysis.Model.CovidCase})">
            <summary>
                Gets the highest number of positive tests.
            </summary>
            <param name="covidCases">The covid cases.</param>
            <returns>CovidCase with the highest number of positive tests.</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.GetLowestNumberOfPositiveTests(System.Collections.Generic.IList{Covid19Analysis.Model.CovidCase})">
            <summary>
                Gets the lowest number of positive tests.
            </summary>
            <param name="covidCases">The covid cases.</param>
            <returns>CovidCase with the lowest number of positive.</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.FindAndReplace(Covid19Analysis.Model.CovidCase)">
            <summary>
                Finds and Replaces a covid case with the exact date.
            </summary>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.ClearData">
            <summary>
                Clears all data in the collection.
            </summary>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.NumberOfPositiveCasesBetween(System.Int32,System.Int32)">
            <summary>The number of positive cases between the given parameters.</summary>
            <param name="minTestCount">The minimum test count.</param>
            <param name="maxTestCount">The maximum test count.</param>
            <returns>
              The number of positive cases between the given parameters.
            </returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationData.RemoveDuplicateEntry(Covid19Analysis.Model.CovidCase)">
            <summary>
            Removes a duplicate entry
            </summary>
        </member>
        <member name="T:Covid19Analysis.Model.CovidLocationDataCollection">
            <summary>
                Class to hold the collection of States
            </summary>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationDataCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Covid19Analysis.Model.CovidLocationDataCollection"/> class.
            </summary>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationDataCollection.GetLocationData(System.String)">
            <summary>
                Gets the LocationData if it exists.
            </summary>
            <param name="locationAbbreviation">The state / territory abbreviation you want to search for.</param>
            <returns>The LocationData / Territory and it's related data</returns>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationDataCollection.AddCovidCase(Covid19Analysis.Model.CovidCase)">
            <summary>
                Adds the specified covid case to the collection.
            </summary>
            <param name="covidCase">The covid case you want to add.</param>
            <exception cref="T:System.ArgumentNullException">covidCase cannot be null</exception>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationDataCollection.AddAllCovidCases(System.Collections.Generic.IList{Covid19Analysis.Model.CovidCase})">
            <summary>
                Adds all of the covid cases within the specified list.
            </summary>
            <param name="covidCases">The covid cases you would like to add.</param>
            <exception cref="T:System.ArgumentNullException">covidCases cannot be null</exception>
        </member>
        <member name="M:Covid19Analysis.Model.CovidLocationDataCollection.ClearData">
            <summary>
                Clears the data.
            </summary>
        </member>
        <member name="T:Covid19Analysis.View.DuplicateEntryContentDialog">
            <summary>
              Class for creating a duplicate entry content dialog
            </summary>
        </member>
        <member name="P:Covid19Analysis.View.DuplicateEntryContentDialog.IsChecked">
            <summary>Gets or sets a value indicating whether this instance is checked.</summary>
            <value>
            <c>true</c> if this instance is checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Covid19Analysis.View.DuplicateEntryContentDialog.Subtitle">
            <summary>Gets or sets the subtitle.</summary>
            <value>The subtitle.</value>
        </member>
        <member name="P:Covid19Analysis.View.DuplicateEntryContentDialog.Message">
            <summary>Gets or sets the message.</summary>
            <value>The message.</value>
        </member>
        <member name="P:Covid19Analysis.View.DuplicateEntryContentDialog.LastKnownButtonPress">
            <summary>Gets or sets the last known button press.</summary>
            <value>The last known button press.</value>
        </member>
        <member name="M:Covid19Analysis.View.DuplicateEntryContentDialog.#ctor">
            <summary>Initializes a new instance of the <a onclick="return false;" href="DuplicateEntryContentDialog" originaltag="see">DuplicateEntryContentDialog</a> class.</summary>
        </member>
        <member name="M:Covid19Analysis.View.DuplicateEntryContentDialog.UpdateContent">
            <summary>Updates the content.</summary>
        </member>
        <member name="M:Covid19Analysis.View.DuplicateEntryContentDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Covid19Analysis.View.DuplicateEntryContentDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Covid19Analysis.View.DuplicateEntryContentDialog.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Covid19Analysis.View.CovidOutputBuilder">
            <summary>
                Report class to showcase data at a given location.
            </summary>
        </member>
        <member name="P:Covid19Analysis.View.CovidOutputBuilder.LocationData">
            <summary>
                Gets or sets the LocationData for the report.
            </summary>
            <value>
                The LocationData.
            </value>
            <exception cref="T:System.NullReferenceException">value cannot be null</exception>
        </member>
        <member name="P:Covid19Analysis.View.CovidOutputBuilder.UpperThreshold">
            <summary>
                Gets or sets the upper threshold for positive cases.
            </summary>
            <value>The upper threshold.</value>
        </member>
        <member name="P:Covid19Analysis.View.CovidOutputBuilder.LowerThreshold">
            <summary>
                Gets or sets the lower threshold for positive cases.
            </summary>
            <value>The lower threshold.</value>
        </member>
        <member name="P:Covid19Analysis.View.CovidOutputBuilder.BinSize">
            <summary>
                Gets or sets the bin size for the histogram.
            </summary>
            <value>The lower threshold.</value>
        </member>
        <member name="M:Covid19Analysis.View.CovidOutputBuilder.#ctor(Covid19Analysis.Model.CovidLocationData)">
            <summary>
                Initializes a new instance of the <see cref="T:Covid19Analysis.View.CovidOutputBuilder" /> class.
            </summary>
            <param name="stateData">The location data.</param>
            <exception cref="T:System.NullReferenceException">stateData cannot be null</exception>
        </member>
        <member name="M:Covid19Analysis.View.CovidOutputBuilder.GetLocationSummary">
            <summary>
                Gets the LocationData summary.
            </summary>
            <returns>A summary of the LocationData</returns>
        </member>
        <member name="M:Covid19Analysis.View.CovidOutputBuilder.GetMonthlySummary(System.Int32)">
            <summary>
                Gets the monthly summary of a given month.
            </summary>
            <param name="month">The month to generate a report for.</param>
            <returns>The monthly summary of a given month.</returns>
        </member>
        <member name="M:Covid19Analysis.View.CovidOutputBuilder.GetYearlySummary">
            <summary>
                Gets the yearly summary of all months with Covid data.
            </summary>
            <returns>A yearly summary of the covid data for the current LocationData.</returns>
        </member>
        <member name="T:Covid19Analysis.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="T:Covid19Analysis.Covid19Analysis_XamlTypeInfo.XamlMetaDataProvider">
            <summary>
            Main class for providing metadata for the app or library
            </summary>
        </member>
        <member name="M:Covid19Analysis.Covid19Analysis_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:Covid19Analysis.Covid19Analysis_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:Covid19Analysis.Covid19Analysis_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
    </members>
</doc>
